import base64
from fastapi import APIRouter, File, UploadFile, Form, HTTPException
from fastapi.responses import JSONResponse
from typing import Optional
from datetime import datetime

from src.analyzer import analyze_file_async
from src.schemas import AnalyzeResponse

router = APIRouter()


@router.get("/health")
def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
    return {
        "status": "ok",
        "version": "2.0",
        "features": [
            "async_processing",
            "streaming_csv",
            "custom_periods",
            "anomaly_detection",
            "platform_analysis",
        ],
    }


def _generate_text_report(result: dict) -> str:
    def format_currency(value):
        return f"{value:,.0f} ‚ÇΩ".replace(",", " ")

    def format_number(value):
        return f"{value:,}".replace(",", " ")

    report_lines = [
        "‚ú® *DASHLY –û–¢–ß–ï–¢* ‚ú®",
        "",
        "*–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*",
        f"üí∞ –í—ã—Ä—É—á–∫–∞: `{format_currency(result['metrics']['revenue'])}`",
        f"üì¶ –ó–∞–∫–∞–∑—ã: `{format_number(int(result['metrics']['orders']))}`",
        f"üí≥ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: `{format_currency(result['metrics']['avg_check'])}`",
        f"üíµ –ü—Ä–∏–±—ã–ª—å: `{format_currency(result['metrics']['profit'])}`",
        "",
    ]

    # –î–∏–Ω–∞–º–∏–∫–∞ –º–µ—Ç—Ä–∏–∫
    changes = []

    revenue_change = result["metrics"].get("revenue_change_pct")
    if revenue_change is not None:
        trend_icon = "üü¢" if revenue_change >= 0 else "üî¥"
        changes.append(f"–í—ã—Ä—É—á–∫–∞: {trend_icon} {revenue_change:+.1f}%")

    orders_change = result["metrics"].get("orders_change_pct")
    if orders_change is not None:
        trend_icon = "üü¢" if orders_change >= 0 else "üî¥"
        changes.append(f"–ó–∞–∫–∞–∑—ã: {trend_icon} {orders_change:+.1f}%")

    avg_check_change = result["metrics"].get("avg_check_change_pct")
    if avg_check_change is not None:
        trend_icon = "üü¢" if avg_check_change >= 0 else "üî¥"
        changes.append(f"–°—Ä.—á–µ–∫: {trend_icon} {avg_check_change:+.1f}%")

    if changes:
        report_lines.append("*–î–∏–Ω–∞–º–∏–∫–∞ –∫ –ø—Ä–æ—à–ª–æ–º—É –ø–µ—Ä–∏–æ–¥—É:*")
        for change in changes:
            report_lines.append(change)
        report_lines.append("")

    # –¢–æ–ø —Ç–æ–≤–∞—Ä—ã (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ß–ê–°–¢–¨)
    if result.get("top5"):
        report_lines.append("*–¢–æ–ø-5 —Ç–æ–≤–∞—Ä–æ–≤:*")
        for i, item in enumerate(result["top5"][:5], 1):
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
            title = item.get("title", item.get("sku", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä"))
            qty = item.get("qty", 0)
            revenue_pct = item.get("revenue_pct", 0)
            report_lines.append(f"{i}. {title} - {qty} —à—Ç. ({revenue_pct:.1f}%)")
        report_lines.append("")

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ß–ê–°–¢–¨)
    tips = result.get("tips", [])
    if tips:
        report_lines.append("*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*")
        for i, tip in enumerate(tips, 1):
            report_lines.append(f"{i}. {tip}")
    else:
        report_lines.append("*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*")
        report_lines.append("1. –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!")

    # –§—É—Ç–µ—Ä
    report_lines.extend(["", f"_–û—Ç—á–µ—Ç –æ—Ç {datetime.now().strftime('%d.%m.%Y %H:%M')}_"])

    return "\n".join(report_lines)


@router.post("/analyze", response_model=AnalyzeResponse)
async def analyze(
    period: str = Form(...),
    file: UploadFile = File(...),
    custom_start: Optional[str] = Form(None),
    custom_end: Optional[str] = Form(None),
):
    period = period.lower()

    if period not in ("today", "week", "custom"):
        raise HTTPException(
            status_code=400,
            detail="–ø–µ—Ä–∏–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑: today, week, month, all, custom",
        )

    if period == "custom":
        if not custom_start or not custom_end:
            raise HTTPException(
                status_code=400,
                detail="custom_start –∏ custom_end —Ç—Ä–µ–±—É—é—Ç—Å—è –¥–ª—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞",
            )

        try:
            datetime.strptime(custom_start, "%Y-%m-%d")
            datetime.strptime(custom_end, "%Y-%m-%d")
        except ValueError:
            raise HTTPException(
                status_code=400, detail="–î–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î."
            )

    content = await file.read()
    if len(content) > 50 * 1024 * 1024:
        raise HTTPException(
            status_code=413, detail="–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 50 –ú–ë."
        )

    if not file.filename.lower().endswith((".csv")):  # type: ignore
        raise HTTPException(status_code=400, detail="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã CSV")

    try:
        result = await analyze_file_async(
            content,
            filename=file.filename,  # type: ignore
            period=period,
            custom_start=custom_start,
            custom_end=custom_end,
        )
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"
        )

    chart_b64 = base64.b64encode(result["chart_png"]).decode("ascii")
    text_report = _generate_text_report(result)

    response = {
        "chart_png_base64": chart_b64,
        "text_report": text_report,
    }

    return JSONResponse(content=response)
