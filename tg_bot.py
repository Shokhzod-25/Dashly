import base64
import asyncio
from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters import Command
from aiogram import F
from aiogram import types
import io
import aiohttp
import asyncio
import logging

logger = logging.getLogger(__name__)


router = Router()


@router.message(Command("start"))
async def handler_start(msg: types.Message):
    await msg.answer(
        "üìä –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ CSV-—Ñ–∞–π–ª —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏, —á—Ç–æ–±—ã —è —Å–¥–µ–ª–∞–ª –∞–Ω–∞–ª–∏–∑."
    )



@router.message(F.content_type == "document")
async def handle_document(msg: types.Message):
    document = msg.document

    if not document.file_name or not document.file_name.lower().endswith(".csv"):
        await msg.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö.")
        return

    await msg.answer("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ... –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏ ‚è≥")

    try:
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        file_bytes_io = io.BytesIO()
        await msg.bot.download(document, destination=file_bytes_io)
        file_bytes_io.seek(0)

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ FormData –¥–ª—è aiohttp
        form_data = aiohttp.FormData()
        form_data.add_field('file', 
                          file_bytes_io.getvalue(), 
                          filename=document.file_name,
                          content_type='text/csv')
        form_data.add_field('period', 'week')

        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "http://localhost:8000/analyze",
                data=form_data,
                timeout=aiohttp.ClientTimeout(total=120)
            ) as response:
                
                if response.status != 200:
                    error_text = await response.text()
                    await msg.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {error_text}")
                    return

                report = await response.json()

        # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞...
        image_bytes = base64.b64decode(report["chart_png_base64"])
        image_file = types.BufferedInputFile(image_bytes, filename="chart.png")

        caption = report.get("text_report", "üìä –û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º")
        if len(caption) > 1024:
            caption = caption[:1021] + "..."

        await msg.answer_photo(
            photo=image_file,
            caption=caption,
            parse_mode="Markdown",
        )

    except asyncio.TimeoutError:
        await msg.answer("‚è∞ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    except aiohttp.ClientError as e:
        await msg.answer(f"üåê –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
    
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
async def main():
    bot = Bot(token="8022350360:AAF2zifWihlUoYz0q_GQ1xPCHKJ0vA-hvVQ")
    dp = Dispatcher()
    dp.include_router(router)

    print("ü§ñ DashlyBot –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
